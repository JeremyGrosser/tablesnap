#!/usr/bin/env python
from __future__ import division

import argparse
import grp
import hashlib
import json
import logging.handlers
import os
import os.path
import pwd
import re
import signal
import socket
import subprocess
import sys
from Queue import Queue
from threading import Thread
from traceback import format_exc

import boto
import boto3
import pyinotify
from boto3.s3.transfer import TransferConfig, S3Transfer
from botocore.exceptions import ClientError

default_log = logging.getLogger('tablesnap')
if os.environ.get('TABLESNAP_SYSLOG', False):
    facility = logging.handlers.SysLogHandler.LOG_DAEMON
    syslog = logging.handlers.SysLogHandler(address='/dev/log', facility=facility)
    syslog.setFormatter(logging.Formatter('tablesnap: %(message)s'))
    default_log.addHandler(syslog)
else:
    stderr = logging.StreamHandler()
    stderr.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))
    default_log.addHandler(stderr)

if os.environ.get('TDEBUG', False):
    default_log.setLevel(logging.DEBUG)
else:
    default_log.setLevel(logging.INFO)

default_log.info('Starting up')

# Default number of writer threads
default_threads = 4

# S3 limit for single file upload
s3_limit = 5 * 2**30

# Max file size to upload without doing multipart in MB
max_file_size = 5120

# Default chunk size for multipart uploads in MB
default_chunk_size = 256

# Default inotify event to listen on
default_listen_events = ['IN_MOVED_TO', 'IN_CLOSE_WRITE']


class ProgressPercentage(object):
    def __init__(self, filename, filesize, log):
        self._filename = filename
        self._filesize = filesize
        self._seen_so_far = 0
        self.log = log

    def __call__(self, bytes_amount):
        self._seen_so_far += bytes_amount
        percentage = round((self._seen_so_far / self._filesize) * 100, 2)
        self.log.info('Uploading {}. {}  out of {} done. Percentage complete: {} %'
                      .format(self._filename, self._seen_so_far, self._filesize, percentage))

class UploadHandler(pyinotify.ProcessEvent):
    def my_init(self, threads=None, key=None, secret=None, token=None, region=None, bucket=None,
                prefix=None, name=None, max_size=None, chunk_size=None,
                include=None,
                reduced_redundancy=False,
                with_index=True,
                with_sse=False,
                keyname_separator=None,
                delete_on_backup=False,
                log=default_log,
                md5_on_start=False,
                retries=1,
                with_tokens=None):
        self.key = key
        self.secret = secret
        self.token = token
        self.region = region
        self.bucket = bucket
        self.prefix = prefix
        self.name = name or socket.getfqdn()
        self.keyname_separator = keyname_separator
        self.retries = retries
        self.log = log
        self.include = include
        self.reduced_redundancy = reduced_redundancy
        self.with_index = with_index
        if with_sse == 'AES256':
            self.sse = 'AES256'
            self.kmskey = None
        else:
            self.sse = 'aws:kms'
            self.kmskey = with_sse
        self.delete_on_backup = delete_on_backup
        self.md5_on_start = md5_on_start
        self.with_tokens = with_tokens

        if max_size:
            self.max_size = max_size * 2**20
        else:
            self.max_size = max_file_size * 2**20

        if chunk_size:
            self.chunk_size = chunk_size * 2**20

        if with_tokens:
            self.cassandra_tokens = []

        self.fileq = Queue()
        for i in range(int(threads)):
            t = Thread(target=self.worker)
            t.daemon = True
            t.start()

    def build_keyname(self, pathname):
        return '%s%s%s%s' % (self.prefix, self.name, self.keyname_separator,
                             pathname)

    def add_file(self, filename):
        if self.include is None or (self.include is not None
                                    and self.include(filename)):
            self.fileq.put(filename)
        else:
            self.log.info('Skipping %s due to exclusion rule' % filename)

    def get_s3(self):
        # Reconnect to S3
        if self.token:
            s3 = boto3.client('s3', aws_access_key_id=self.key,
                              aws_secret_access_key=self.secret,
                              security_token=self.token)
        else:
            s3 = boto3.client('s3', aws_access_key_id=self.key,
                              aws_secret_access_key=self.secret)
        return s3

    def worker(self):
        s3 = self.get_s3()

        while True:
            f = self.fileq.get()
            keyname = self.build_keyname(f)
            try:
                self.upload_sstable(s3, self.bucket, keyname, f)
            except:
                self.log.critical("Failed uploading %s. Aborting.\n%s" %
                             (f, format_exc()))
                # Brute force kill self
                os.kill(os.getpid(), signal.SIGKILL)

            self.fileq.task_done()

    def process_IN_CLOSE_WRITE(self, event):
        self.add_file(event.pathname)

    def process_IN_MOVED_TO(self, event):
        self.add_file(event.pathname)

    def process_IN_CREATE(self, event):
        self.add_file(event.pathname)
    #
    # Check if this keyname (ie, file) has already been uploaded to
    # the S3 bucket. This will verify that not only does the keyname
    # exist, but that the MD5 sum is the same -- this protects against
    # partial or corrupt uploads. IF you enable md5 at start
    #

    def key_exists(self, s3, bucket, keyname, filename, stat):
        key = None
        for r in range(self.retries):
            try:
                key = s3.head_object(Bucket=bucket, Key=keyname)
                self.log.debug('Found key %s' % (keyname,))
                break
            except ClientError as e:
                if e.response['Error']['Code'] == '404':
                    self.log.debug('Key %s does not exist' % (keyname,))
                    return False
                s3 = self.get_s3()
                continue

        if key is None:
            self.log.critical("Failed to lookup keyname %s after %d"
                              " retries\n%s" %
                             (keyname, self.retries, format_exc()))
            raise

        if key['ContentLength'] != stat.st_size:
            self.log.warning('ATTENTION: your source (%s) and target (%s) '
                'sizes differ, you should take a look. As immutable files '
                'never change, one must assume the local file got corrupted '
                'and the right version is the one in S3. Will skip this file '
                'to avoid future complications' % (filename, keyname, ))
            return True
        else:
            if not self.md5_on_start:
                # Don't bother computing MD5 at startup
                return True
            else:
                # Compute MD5 sum of file
                try:
                    etag = calculate_s3_etag(filename, self.chunk_size)
                except IOError as (errno, strerror):
                    if errno == 2:
                        # The file was removed, return True to skip this file.
                        return True

                    self.log.critical("Failed to open file: %s (%s)\n%s" %
                                 (filename, strerror, format_exc(),))
                    raise

                self.log.debug('Computed etag: %s' % (etag,))

                meta = key['ETag'][1:-1]

                self.log.debug('MD5 metadata comparison: %s == %s? : %s' %
                              (etag, meta, (etag == meta)))
                result = (etag == meta)

                if result:
                    self.log.info("Keyname %s already exists, skipping upload"
                                  % (keyname))
                else:
                    self.log.warning('ATTENTION: your source (%s) and target (%s) '
                        'MD5 hashes differ, you should take a look. As immutable '
                        'files never change, one must assume the local file got '
                        'corrupted and the right version is the one in S3. Will '
                        'skip this file to avoid future complications' %
                        (filename, keyname, ))

                return result

    def should_create_index(self, filename):
        """ Should we upload a JSON index for this file? Cassandra
            SSTables are composed of six files, so only generate a
            JSON file when we upload a .Data.db file. """
        return ("Data.db" in filename)

    def upload_utility_file(self, s3, bucket, key, body):
        for r in range(self.retries):
            try:
                if self.kmskey:
                    s3.put_object(Bucket=bucket,
                                  Key=key,
                                  Body=body,
                                  ServerSideEncryption=self.sse,
                                  StorageClass='REDUCED_REDUNDANCY' if self.reduced_redundancy else 'STANDARD',
                                  SSEKMSKeyId=self.kmskey)
                else:
                    s3.put_object(Bucket=bucket,
                                  Key=key,
                                  Body=body,
                                  ServerSideEncryption=self.sse,
                                  StorageClass='REDUCED_REDUNDANCY' if self.reduced_redundancy else 'STANDARD')
                self.log.info("Uploaded %s" % key)
            except:
                if r == self.retries - 1:
                    self.log.critical("Failed to upload key %s" % key)
                    raise
                s3 = self.get_s3()
                continue

    def generate_tokens(self, ip):
        """Generate a list of tokens for the current node.
        """
        if self.cassandra_tokens:
            return self.cassandra_tokens
        tokens = []
        try:
            p = subprocess.Popen(['nodetool', 'ring'], stdout=subprocess.PIPE)
            for line in p.stdout:
                if ip in line:
                    tokens.append(line.split()[7])
            self.log.info('Generated tokens file')
            self.cassandra_tokens = ','.join(tokens)
            return self.cassandra_tokens
        except:
            self.log.warn('Unable to obtain tokens from Cassandra.')
            return tokens

    def upload_sstable(self, s3, bucket, keyname, filename):
        # Include the file system metadata so that we have the
        # option of using it to restore the file modes correctly.
        #
        try:
            stat = os.stat(filename)
        except OSError:
            # File removed?
            return

        if self.key_exists(s3, bucket, keyname, filename, stat):
            return
        else:
            try:
                etag = calculate_s3_etag(filename, self.chunk_size)
            except IOError:
                # File removed?
                return
            self.log.debug('Computed etag before upload is: %s' % (etag,))

        def progress(sent, total):
            if sent == total:
                self.log.info('Finished uploading %s' % filename)

        def delete_if_enabled():
            if self.delete_on_backup:
                os.remove(filename)
                self.log.info('Deleted %s' % filename)

        try:
            dirname = os.path.dirname(filename)
            listdir = []
            if self.with_index and self.should_create_index(filename):
                for listfile in os.listdir(dirname):
                    if self.include is None or (self.include is not None
                                                and self.include(listfile)):
                        listdir.append(listfile)
                json_str = json.dumps({dirname: listdir})
                self.upload_utility_file(s3, bucket, '%s-listdir.json' % keyname, json_str)

            meta = {'uid': stat.st_uid,
                    'gid': stat.st_gid,
                    'mode': stat.st_mode}
            try:
                u = pwd.getpwuid(stat.st_uid)
                meta['user'] = u.pw_name
            except:
                pass

            try:
                g = grp.getgrgid(stat.st_gid)
                meta['group'] = g.gr_name
            except:
                pass

            self.log.info('Uploading %s' % filename)

            meta = json.dumps(meta)

            for r in range(self.retries):
                try:
                    self.log.debug('File size check: %s > %s ? : %s' %
                        (stat.st_size, self.max_size,
                        (stat.st_size > self.max_size),))
                    if stat.st_size > self.max_size:
                        self.log.debug('Performing multipart upload for %s' %
                                     (filename))
                    else:
                        self.log.debug('Performing monolithic upload')
                    config = TransferConfig(multipart_threshold=self.max_size,
                                            multipart_chunksize=self.chunk_size)
                    transfer = S3Transfer(s3, config=config)
                    progress_cb = ProgressPercentage(filename=filename, filesize=stat.st_size, log=self.log)
                    extra_args = {'Metadata': {
                                     'stat': meta
                                 },
                                 'ServerSideEncryption': self.sse,
                                 'StorageClass': 'REDUCED_REDUNDANCY' if self.reduced_redundancy else 'STANDARD',
                    }
                    if self.kmskey:
                        extra_args['SSEKMSKeyId'] = self.kmskey
                    transfer.upload_file(filename=filename, bucket=bucket, key=keyname, callback=progress_cb,
                                         extra_args=extra_args)
                    delete_if_enabled()
                    break
                except:
                    if not os.path.exists(filename):
                        # File was removed? Skip
                        return

                    if r == self.retries - 1:
                        self.log.critical("Failed to upload file contents.")
                        raise
                    s3 = self.get_s3()
                    continue
            if self.with_tokens is not None and self.should_create_index(keyname):
                tokens = self.generate_tokens(self.with_tokens)
                self.upload_utility_file(s3, bucket, self.build_keyname('/tokens.yaml'), tokens)

        except:
            self.log.error('Error uploading %s\n%s' % (keyname, format_exc()))
            raise


def get_mask(listen_events):
    if not listen_events:
        listen_events = default_listen_events

    mask = 0
    while listen_events:
        mask = mask | getattr(pyinotify, listen_events.pop())

    return mask


def backup_file(handler, filename, filedir, include, log):
    if not filedir.endswith('/'):
        filedir += '/'

    fullpath = os.path.abspath('%s%s' % (filedir, filename))

    if os.path.isdir(fullpath):
        return

    if not include(fullpath):
        log.info('Skipping %s due to exclusion rule' % fullpath)
        return

    handler.add_file(fullpath)


def backup_files(handler, paths, recurse, include, log=default_log):
    for path in paths:
        log.info('Backing up %s' % path)
        if recurse:
            for root, dirs, files in os.walk(path):
                for filename in files:
                    backup_file(handler, filename, root, include, log)
        else:
            for filename in os.listdir(path):
                backup_file(handler, filename, path, include, log)
    return 0


def calculate_s3_etag(file_path, chunk_size=8 * 1024 * 1024):
    md5s = []

    with open(file_path, 'rb') as fp:
        while True:
            data = fp.read(chunk_size)
            if not data:
                break
            md5s.append(hashlib.md5(data))

    if len(md5s) == 1:
        return '{}'.format(md5s[0].hexdigest())

    digests = b''.join(m.digest() for m in md5s)
    digests_md5 = hashlib.md5(digests)
    return '{}-{}'.format(digests_md5.hexdigest(), len(md5s))


def main():
    parser = argparse.ArgumentParser(description='Tablesnap is a script that '
        'uses inotify to monitor a directory for events and reacts to them by '
        'spawning a new thread to upload that file to Amazon S3, along with '
        'a JSON-formatted list of what other files were in the directory at '
        'the time of the copy.')
    parser.add_argument('bucket', help='S3 bucket')
    parser.add_argument('paths', nargs='+', help='Paths to be watched')
    parser.add_argument('-k', '--aws-key',
        default=os.environ.get('AWS_ACCESS_KEY_ID'),
        help='Amazon S3 Key (default from AWS_ACCESS_KEY_ID in environment)')
    parser.add_argument('-s', '--aws-secret',
        default=os.environ.get('AWS_SECRET_ACCESS_KEY'),
        help='Amazon S3 Secret (default from AWS_SECRET_ACCESS_KEY in environment)')
    parser.add_argument('--aws-region',
        default='us-east-1',
        choices=[region.name for region in boto.s3.regions()],
        help='AWS region to connect to.')
    parser.add_argument('--aws-token',
        default=os.environ.get('AWS_SECURITY_TOKEN'),
        help='Amazon S3 Token (default from AWS_SECURITY_TOKEN in environment)')
    parser.add_argument('-r', '--recursive', action='store_true',
        default=False,
        help='Recursively watch the given path(s)s for new SSTables')
    parser.add_argument('-a', '--auto-add', action='store_true', default=False,
        help='Automatically start watching new subdirectories within path(s)')
    parser.add_argument('-B', '--backup', action='store_true', default=False,
        help='Backup existing files to S3 if they are not already there')
    parser.add_argument('-R', '--reduced-redundancy', action='store_true',
        default=False, help='Use reduced redundancy for files uploaded to S3.')
    parser.add_argument('-p', '--prefix', default='',
        help='Set a string prefix for uploaded files in S3')
    parser.add_argument('--without-index', action='store_true', default=False,
        help='Do not store a JSON representation of the current directory '
             'listing in S3 when uploading a file to S3.')
    parser.add_argument('--with-sse', nargs='?', const='AES256',
        help='Enable server-side encryption for all uploads to S3. Provide either a '
             'KMS key ID or else leave it empty to use AES256 (default)')
    parser.add_argument('--with-tokens',
        help='Get a list of tokens for the node as well based on provided IP')
    parser.add_argument('--keyname-separator', default=':',
        help='Separator for the keyname between name and path.')
    parser.add_argument('-t', '--threads', default=default_threads,
        help='Number of writer threads')
    parser.add_argument('-n', '--name',
        help='Use this name instead of the FQDN to identify the files from '
             'this host')
    parser.add_argument('--md5-on-start', default=False, action='store_true',
        help='If you want to compute *every file* for its MD5 checksum at '
             'start time, enable this option.')
    parser.add_argument('--listen-events', action='append',
        choices=['IN_MOVED_TO', 'IN_CLOSE_WRITE', 'IN_CREATE'],
        help='Which events to listen on, can be specified multiple times. '
             'Values: IN_MOVED_TO, IN_CLOSE_WRITE, IN_CREATE (default IN_MOVED_TO, IN_CLOSE_WRITE)')
    parser.add_argument('--delete-on-backup', action='store_true', default=False,
                        help='Delete the file upon successful backup.')
    include_group = parser.add_mutually_exclusive_group()
    include_group.add_argument('-e', '--exclude', default=None, nargs='+',
        help='Exclude files matching this regular expression from upload.'
             'WARNING: If neither exclude nor include are defined, then all '
             'files matching "-tmp" are excluded. This option may be used '
             'more than once.')
    include_group.add_argument('-i', '--include', default=None, nargs='+',
        help='Include only files matching this regular expression into upload.'
             'WARNING: If neither exclude nor include are defined, then all '
             'files matching "-tmp" are excluded. This option may be used '
             'more than once.')
    parser.add_argument('--max-upload-size', default=max_file_size,
        help='Max size for files to be uploaded before doing multipart '
             '(default %dM)' % max_file_size)
    parser.add_argument('--multipart-chunk-size', default=default_chunk_size,
        help='Chunk size for multipart uploads (default: %dM or 10%%%% of '
             'free memory if default is not available)' % default_chunk_size)
    parser.add_argument('--retries', default=0, type=int,
        help='If a file upload fails, retry N times before throwing an'
             'exception, backing off linearly between each retry (default: no retrying)')
    args = parser.parse_args()

    # For backwards-compatibility: If neither exclude nor include are set,
    # then include only files not matching '-tmp'. This was the default
    include = lambda path: path.find('-tmp') == -1
    if args.exclude:
        include = lambda path: not any([re.search(x, path) for x in args.exclude])
    if args.include:
        include = lambda path: any([re.search(x, path) for x in args.include])

    # Check S3 credentials only. We reconnect per-thread to avoid any
    # potential thread-safety problems.

    if args.aws_token:
        boto3.client('s3', aws_access_key_id=args.aws_key,
                           aws_secret_access_key=args.aws_secret,
                           security_token=args.aws_token)
    else:
        boto3.client('s3', aws_access_key_id=args.aws_key,
                           aws_secret_access_key=args.aws_secret)

    handler = UploadHandler(threads=args.threads, key=args.aws_key,
                            secret=args.aws_secret, token=args.aws_token,
                            region=args.aws_region, bucket=args.bucket,
                            prefix=args.prefix, name=args.name,
                            include=include,
                            reduced_redundancy=args.reduced_redundancy,
                            with_index=(not args.without_index),
                            with_sse=args.with_sse,
                            delete_on_backup=args.delete_on_backup,
                            keyname_separator=args.keyname_separator,
                            max_size=int(args.max_upload_size),
                            chunk_size=int(args.multipart_chunk_size),
                            md5_on_start=args.md5_on_start,
                            retries=(args.retries + 1),
                            with_tokens=args.with_tokens)

    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm, handler)

    mask = get_mask(args.listen_events)
    for path in args.paths:
        ret = wm.add_watch(path, mask, rec=args.recursive,
                           auto_add=args.auto_add)
        if ret[path] == -1:
            default_log.critical('add_watch failed for %s, bailing out!' %
                                (path))
            return 1

    if args.backup:
        backup_files(handler, args.paths, args.recursive, include)

    notifier.loop()

if __name__ == '__main__':
    sys.exit(main())